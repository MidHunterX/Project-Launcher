#!/usr/bin/env bash

# -----------------------------[ CONFIGURATION ]----------------------------- #

# Default: project dir name
PROJECT_NAME=""
# Default: automatic detection
# Available values:
# none | rust | python | django | fastapi | nodejs | nextjs | elixir | angular
PROJECT_TYPE=""

# Services: add any valid systemd services here
ENABLED_SERVICES=(
  # postgresql
  # docker
  # mongod
  # redis-server
  # nginx
)

# Settings: [ true | false ]
AUTOSTART_SERVER=true
AUTORUN_COMMANDS=true

# ---------------------------[ CUSTOM OVERRIDES ]--------------------------- #

# script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# cd "$script_dir"
current_dir="$(pwd)"

USE_CUSTOM_LAYOUT=false
setup_layout_custom() {
  # Project specific custom layout override example

  # 1. Server (FastAPI)
  cd "../fastapi-project/"
  setup_env "fastapi"
  create_tmux_session "API Server" "fastapi dev main.py"

  # 2. Server (NextJS)
  cd "$current_dir"
  setup_env "nextjs"
  create_window "Web Server" "npm run dev"

  # 3. Editor (FastAPI)
  cd "../fastapi-project/"
  create_window "Editor (API)" "nvim"
  deactivate

  # 4. Editor (NextJS)
  cd "$current_dir"
  create_window "Editor (Web)" "nvim"
}

USE_CUSTOM_ENV=false
setup_env_custom() {
  # Project specific custom init setup override example
  setup_env "node_modules/" "npm install --force --legacy-peer-deps"
}

USE_POST_INITIALIZATION_HOOK=false
setup_post_init_hook() {
  # Project specific post execution hook example
  log "üîó Launching browser..."
  (
    new_tab_url="http://localhost:3000"

    # Wait for the server to start
    local timeout=20
    while ! curl -sf "$new_tab_url" >/dev/null; do
      sleep 1
      ((timeout--)) || { exit 1; }
    done

    # Launch the browser
    hyprctl dispatch -- exec [workspace 2] \
      firefox-developer-edition -P Personal -no-remote -new-tab $new_tab_url \
      >/dev/null &
  ) &
}

# =========================================================================== #

# ‚ñà‚ñë‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñà ‚ñà‚ñë‚ñë ‚ñà‚ñÄ
# ‚ñà‚ñÑ‚ñà ‚ñë‚ñà‚ñë ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñÑ‚ñà

# log(str:message)
log() {
  local grn='\033[1;32m'
  local reset='\033[0;0m'
  echo -e "[${grn}$(date +'%H:%M:%S')${reset}] $1"
}

# create_tmux_session(str:session_name str:command)
create_tmux_session() {
  local name="$1"
  local cmd="$2"
  tmux new-session -d -s "$PROJECT_NAME" -n "$name"
  if command -v "${cmd%% *}" >/dev/null; then
    tmux send-keys -t "$PROJECT_NAME" "$cmd"
    [ "$AUTOSTART_SERVER" = true ] && tmux send-keys -t "$PROJECT_NAME" Enter
  fi
}

# create_window(str:window_name str:command int:window_index)
create_window() {
  local name="$1"
  local cmd="$2"
  if command -v "${cmd%% *}" >/dev/null; then
    tmux new-window -t "$PROJECT_NAME" -n "$name"
    tmux send-keys -t "$PROJECT_NAME" "$cmd"
    [ "$AUTORUN_COMMANDS" = true ] && tmux send-keys -t "$PROJECT_NAME" Enter
  fi
}

# create_temp_window(str:window_name str:command)
create_temp_window() {
  local name="$1"
  local cmd="$2"
  if command -v "${cmd%% *}" >/dev/null; then
    tmux new-window -t "$PROJECT_NAME" -n "$1" "$2"
  fi
}

# ‚ñà‚ñë‚ñë ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñë‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñà‚ñÄ
# ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñÄ‚ñà ‚ñë‚ñà‚ñë ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñà ‚ñë‚ñà‚ñë ‚ñÑ‚ñà

# run_server_command(str:project_type)
run_server_command() {
  local project_type="$1"
  case "$project_type" in
  "none") ;; # Do nothing
  "python") echo "python main.py" ;;
  "fastapi") echo "fastapi dev main.py" ;;
  "django") echo "python manage.py runserver" ;;
  "nodejs") echo "npm start" ;;
  "nextjs") echo "npm run dev" ;;
  "angular") echo "ng serve" ;;
  "elixir") echo "iex -S mix phx.server" ;;
  "rust") echo "cargo run" ;;
  *) log "üöß Warning: No server setup for ${project_type}" ;;
  esac
}

setup_base_layout() {
  create_tmux_session "Cmd" "$(run_server_command $PROJECT_TYPE)"
  create_temp_window "Editor" "nvim"
}

setup_fastapi_layout() {
  setup_base_layout
  create_window "Test" "clear && pytest"
}

setup_django_layout() {
  setup_base_layout
  create_window "Test" "python manage.py test"
}

setup_rust_layout() {
  setup_base_layout
  create_window "Test" "cargo test"
}

# select_layout(str:project_type)
setup_layout() {
  local project_type="$1"
  case "$project_type" in
  "none") setup_base_layout ;;
  "python") setup_base_layout ;;
  "django") setup_django_layout ;;
  "fastapi") setup_fastapi_layout ;;
  "nodejs") setup_base_layout ;;
  "nextjs") setup_base_layout ;;
  "angular") setup_base_layout ;;
  "elixir") setup_base_layout ;;
  "rust") setup_rust_layout ;;
  *)
    log "üöß Unknown technology: ${project_type}. Using default layout..."
    setup_base_layout
    ;;
  esac
}

# ‚ñà‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñë‚ñà ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ
# ‚ñÑ‚ñà ‚ñà‚ñà‚ñÑ ‚ñà‚ñÄ‚ñÑ ‚ñÄ‚ñÑ‚ñÄ ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà

init_services() {
  for service in "${ENABLED_SERVICES[@]}"; do
    if ! systemctl is-active --quiet "$service"; then
      log "üîß Starting $service..."
      sudo systemctl start "$service"
    fi
  done
}

# ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñë‚ñà ‚ñà‚ñë‚ñà   ‚ñà‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñÄ‚ñà‚ñÄ ‚ñà‚ñë‚ñà ‚ñà‚ñÄ‚ñà
# ‚ñà‚ñà‚ñÑ ‚ñà‚ñë‚ñÄ‚ñà ‚ñÄ‚ñÑ‚ñÄ   ‚ñÑ‚ñà ‚ñà‚ñà‚ñÑ ‚ñë‚ñà‚ñë ‚ñà‚ñÑ‚ñà ‚ñà‚ñÄ‚ñÄ

# setup_base_env(str:dependency_dir str:dependency_cmd)
setup_base_env() {
  local dependency_dir="$1"
  local dependency_cmd="$2"
  if [[ ! -d $dependency_dir ]]; then
    log "üöÄ Setting up dependencies..."
    command -v ${dependency_cmd%% *} >/dev/null || {
      log "‚ùå Error: ${dependency_cmd%% *} not found"
      exit 1
    }
    $dependency_cmd
  fi
}

setup_python_env() {
  local dependency_dir="venv/"
  local dependency_cmd="python -m venv venv"
  if [[ ! -d $dependency_dir ]]; then
    setup_base_env "$dependency_dir" "$dependency_cmd"
    log "üì¶ Installing requirements..."
    source "$dependency_dir/bin/activate"
    if [[ -f "requirements.txt" ]]; then
      pip install -r requirements.txt
    else
      log "üöß Warning: No requirements.txt found"
    fi
  fi
  source "$dependency_dir/bin/activate"
}

setup_node_env() {
  setup_base_env "node_modules/" "npm install"
}

setup_elixir_env() {
  setup_base_env "deps/" "mix setup"
}

# select_env(str:project_type)
setup_env() {
  local project_type="$1"
  case "$project_type" in
  "none") ;; # Do nothing
  "python") setup_python_env ;;
  "django") setup_python_env ;;
  "fastapi") setup_python_env ;;
  "nodejs") setup_node_env ;;
  "nextjs") setup_node_env ;;
  "angular") setup_node_env ;;
  "elixir") setup_elixir_env ;;
  "rust") ;; # Rust sets up its own environment with cargo
  *) log "üöß Unknown technology: ${project_type}" ;;
  esac
}

# ‚ñà‚ñÄ‚ñÑ ‚ñà‚ñÄ‚ñÄ ‚ñÄ‚ñà‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñÄ‚ñà‚ñÄ ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñÑ‚ñë‚ñà
# ‚ñà‚ñÑ‚ñÄ ‚ñà‚ñà‚ñÑ ‚ñë‚ñà‚ñë ‚ñà‚ñà‚ñÑ ‚ñà‚ñÑ‚ñÑ ‚ñë‚ñà‚ñë ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñë‚ñÄ‚ñà

detect_project_type() {
  if [[ -f "main.py" ]]; then
    if grep -q "from fastapi import FastAPI" main.py; then
      echo "fastapi"
    else
      echo "python"
    fi

  elif [[ -f "manage.py" ]]; then
    echo "django"

  elif [[ -f "package.json" ]]; then
    for ext in js ts; do
      if [[ -f "next.config.$ext" ]]; then
        echo "nextjs"
        return
      fi
    done
    echo "nodejs"

  elif [[ -f "angular.json" ]]; then
    echo "angular"

  elif [[ -f "mix.exs" ]]; then
    echo "elixir"

  elif [[ -f "Cargo.toml" ]]; then
    echo "rust"

  else
    echo "none"
  fi
}

# ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñà ‚ñà ‚ñà‚ñÑ‚ñë‚ñà
# ‚ñà‚ñë‚ñÄ‚ñë‚ñà ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà‚ñë‚ñÄ‚ñà

main() {
  # ACTION: Load custom overrides if available
  OVERRIDE_FILE=".run_env"
  if [[ -f "$OVERRIDE_FILE" ]]; then
    source "$OVERRIDE_FILE"
  fi

  init_services

  # FALLBACK: PROJECT_NAME={project dir name}
  if [[ -z "$PROJECT_NAME" ]]; then
    PROJECT_NAME="$(basename "$PWD")"
  fi

  # ACTION: Attach session if exists
  if tmux has-session -t "$PROJECT_NAME" 2>/dev/null; then
    log "Session '$PROJECT_NAME' already exists. Attaching..."
    tmux attach -t "$PROJECT_NAME"
    exit 0
  fi

  # FALLBACK: PROJECT_TYPE={automatic detection}
  if [[ -z "$PROJECT_TYPE" ]]; then
    PROJECT_TYPE="$(detect_project_type)"
    log "üîç Detected project type: $PROJECT_TYPE"
  fi

  # SETUP: ENV or custom
  if [[ "$USE_CUSTOM_ENV" = true ]]; then
    setup_env_custom
  else
    setup_env "$PROJECT_TYPE"
  fi

  # CHECK: tmux dependency for LAYOUT
  if ! command -v tmux >/dev/null; then
    log "‚ÑπÔ∏è Info: tmux not found. Running server without tmux.."
    run_server_command "$PROJECT_TYPE"
    exit 0
  fi

  # SETUP: LAYOUT or custom
  if [[ "$USE_CUSTOM_LAYOUT" = true ]]; then
    setup_layout_custom
  else
    setup_layout "$PROJECT_TYPE"
  fi

  # ACTION: POST INIT HOOK
  if [[ "$USE_POST_INITIALIZATION_HOOK" = true ]]; then
    setup_post_init_hook
  fi

  tmux attach -t "$PROJECT_NAME"
}

main

log "üëã Goodbye!"
