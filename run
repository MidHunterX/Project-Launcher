#!/usr/bin/env bash

# -----------------------------[ CONFIGURATION ]----------------------------- #

# Default: project dir name
PROJECT_NAME=""
# Default: automatic detection
# Available project types:
# [ none | python | django | fastapi | nodejs ]
# [ nextjs | elixir | rust | angular ]
PROJECT_TYPE=""

# Services: uncomment to enable
ENABLED_SERVICES=(
  # postgresql
  # docker
  # mongod
  # redis-server
  # nginx
)

# Settings: [ true | false ]
AUTOSTART_SERVER=true
AUTORUN_COMMANDS=true

# ------------------------[ CUSTOM LAYOUT OVERRIDES ]------------------------ #

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$script_dir"

USE_POST_INITIALIZATION_HOOK=false
setup_post_init_hook() {
  # Project specific post execution hook example
  log "üîó Launching browser..."
  (
    new_tab_url="http://localhost:3000"
    firefox_profile="Personal"

    function is_firefox_profile_running() {
      local profile="$1"
      local proc=$(ps aux | grep "firefox -P $profile" | head -n 1 | awk {printf'$13'})
      [[ $proc == $profile ]]
    }

    function wait_for_server() {
      local url="$1"
      local timeout=30
      while ! curl -sf "$url" >/dev/null; do
        sleep 1
        ((timeout--)) || { exit 1; }
      done
    }

    if is_firefox_profile_running "$firefox_profile"; then
      wait_for_server "$new_tab_url"
    else
      # Give some time for the server to start
      sleep 1.1
    fi

    attributes="-P $firefox_profile -no-remote -new-tab $new_tab_url"
    workspace='hyprctl dispatch -- exec [workspace 2]'
    $workspace firefox-developer-edition $attributes &
  ) &
}

USE_CUSTOM_ENV=false
setup_custom_env() {
  # Project specific custom init setup override example
  setup_env "node_modules/" "npm install --force --legacy-peer-deps"
}

USE_CUSTOM_LAYOUT=false
setup_custom_layout() {
  # Project specific custom layout override example

  # 1. Server (FastAPI)
  cd "../fastapi-project/"
  setup_python_env
  source "./venv/bin/activate"
  create_tmux_session "API Server" "fastapi dev main.py"
  cd "$script_dir"

  # 2. Server (NextJS)
  setup_node_env
  create_window "Web Server" "npm run dev"

  # 3. Editor (FastAPI)
  cd "../fastapi-project/"
  create_window "Editor (API)" "nvim"
  deactivate
  cd "$script_dir"

  # 4. Editor (NextJS)
  create_window "Editor (Web)" "nvim"
}

# =========================================================================== #

# ‚ñà‚ñë‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñà ‚ñà‚ñë‚ñë ‚ñà‚ñÄ
# ‚ñà‚ñÑ‚ñà ‚ñë‚ñà‚ñë ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñÑ‚ñà

log() {
  local grn='\033[1;32m'
  local reset='\033[0;0m'
  echo -e "[${grn}$(date +'%H:%M:%S')${reset}] $1"
}

create_tmux_session() {
  local name="$1"
  local cmd="$2"
  tmux new-session -d -s "$PROJECT_NAME" -n "$name"
  if command -v "${cmd%% *}" >/dev/null; then
    tmux send-keys -t "$PROJECT_NAME" "$cmd"
    [ "$AUTOSTART_SERVER" = true ] && tmux send-keys -t "$PROJECT_NAME" Enter
  fi
}

# create_window(str:window_name str:command int:window_index)
create_window() {
  local name="$1"
  local cmd="$2"
  if command -v "${cmd%% *}" >/dev/null; then
    tmux new-window -t "$PROJECT_NAME" -n "$name"
    tmux send-keys -t "$PROJECT_NAME" "$cmd"
    [ "$AUTORUN_COMMANDS" = true ] && tmux send-keys -t "$PROJECT_NAME" Enter
  fi
}

# create_temp_window(str:window_name str:command)
create_temp_window() {
  local name="$1"
  local cmd="$2"
  if command -v "${cmd%% *}" >/dev/null; then
    tmux new-window -t "$PROJECT_NAME" -n "$1" "$2"
  fi
}

# ‚ñà‚ñë‚ñë ‚ñÑ‚ñÄ‚ñà ‚ñà‚ñÑ‚ñà ‚ñà‚ñÄ‚ñà ‚ñà‚ñë‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñà‚ñÄ
# ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñÄ‚ñà ‚ñë‚ñà‚ñë ‚ñà‚ñÑ‚ñà ‚ñà‚ñÑ‚ñà ‚ñë‚ñà‚ñë ‚ñÑ‚ñà

setup_default_layout() {
  create_tmux_session "Cmd"
  create_temp_window "Editor" "nvim"
}

setup_python_layout() {
  create_tmux_session "Cmd" "python main.py"
  create_temp_window "Editor" "nvim"
}

setup_fastapi_layout() {
  create_tmux_session "Server" "fastapi dev main.py"
  create_temp_window "Editor" "nvim"
  create_window "Test" "clear && pytest"
}

setup_nextjs_layout() {
  create_tmux_session "Server" "npm run dev"
  create_temp_window "Editor" "nvim"
}

setup_django_layout() {
  create_tmux_session "Server" "python manage.py runserver"
  create_temp_window "Editor" "nvim"
  create_window "Test" "python manage.py test"
}

setup_node_layout() {
  create_tmux_session "Server" "npm start"
  create_temp_window "Editor" "nvim"
  create_window "Test" "npm test"
}

setup_rust_layout() {
  create_tmux_session "Run" "cargo run"
  create_temp_window "Editor" "nvim"
  create_window "Test" "cargo test"
}

setup_elixir_layout() {
  create_tmux_session "Server" "iex -S mix phx.server"
  create_temp_window "Editor" "nvim"
}

setup_angular_layout() {
  create_tmux_session "Server" "ng serve"
  create_temp_window "Editor" "nvim"
}

# ‚ñà‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñà ‚ñà‚ñë‚ñà ‚ñà ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÄ
# ‚ñÑ‚ñà ‚ñà‚ñà‚ñÑ ‚ñà‚ñÄ‚ñÑ ‚ñÄ‚ñÑ‚ñÄ ‚ñà ‚ñà‚ñÑ‚ñÑ ‚ñà‚ñà‚ñÑ ‚ñÑ‚ñà

init_services() {
  for service in "${ENABLED_SERVICES[@]}"; do
    if ! systemctl is-active --quiet "$service"; then
      log "üîß Starting $service..."
      sudo systemctl start "$service"
    fi
  done
}

# ‚ñà‚ñÄ‚ñÄ ‚ñà‚ñÑ‚ñë‚ñà ‚ñà‚ñë‚ñà   ‚ñà‚ñÄ ‚ñà‚ñÄ‚ñÄ ‚ñÄ‚ñà‚ñÄ ‚ñà‚ñë‚ñà ‚ñà‚ñÄ‚ñà
# ‚ñà‚ñà‚ñÑ ‚ñà‚ñë‚ñÄ‚ñà ‚ñÄ‚ñÑ‚ñÄ   ‚ñÑ‚ñà ‚ñà‚ñà‚ñÑ ‚ñë‚ñà‚ñë ‚ñà‚ñÑ‚ñà ‚ñà‚ñÄ‚ñÄ

setup_env() {
  local dependency_dir="$1"
  local dependency_cmd="$2"
  if [[ ! -d $dependency_dir ]]; then
    log "üöÄ Setting up dependencies..."
    command -v ${dependency_cmd%% *} >/dev/null || {
      log "‚ùå Error: ${dependency_cmd%% *} not found"
      exit 1
    }
    $dependency_cmd
  fi
}

setup_python_env() {
  local dependency_dir="venv/"
  local dependency_cmd="python -m venv venv"
  if [[ ! -d $dependency_dir ]]; then
    setup_env "$dependency_dir" "$dependency_cmd"
    log "üì¶ Installing requirements..."
    source "$dependency_dir/bin/activate"
    if [[ -f "requirements.txt" ]]; then
      pip install -r requirements.txt
    else
      log "üöß Warning: No requirements.txt found"
    fi
  fi
  source "$dependency_dir/bin/activate"
}

setup_node_env() {
  setup_env "node_modules/" "npm install"
}

setup_elixir_env() {
  setup_env "deps/" "mix setup"
}

# ‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñÑ‚ñÄ‚ñà ‚ñà ‚ñà‚ñÑ‚ñë‚ñà
# ‚ñà‚ñë‚ñÄ‚ñë‚ñà ‚ñà‚ñÄ‚ñà ‚ñà ‚ñà‚ñë‚ñÄ‚ñà

main() {
  # CHECK: tmux dependency
  if ! command -v tmux >/dev/null; then
    log "Tmux is required for full functionality."
    log "Install with: sudo apt install tmux (or equivalent for your OS)"
    exit 0
  fi

  init_services

  # FALLBACK: PROJECT_NAME={project dir name}
  if [[ -z "$PROJECT_NAME" ]]; then
    PROJECT_NAME="$(basename "$PWD")"
  fi

  # ACTION: Attach session if exists
  if tmux has-session -t "$PROJECT_NAME" 2>/dev/null; then
    log "Session '$PROJECT_NAME' already exists. Attaching..."
    tmux attach -t "$PROJECT_NAME"
    exit 0
  fi

  # FALLBACK: PROJECT_TYPE={automatic detection}
  if [[ -z "$PROJECT_TYPE" ]]; then
    declare -A project_files=(
      ["python"]="main.py"
      ["django"]="manage.py"
      ["fastapi"]="main.py"
      ["nodejs"]="package.json"
      ["nextjs"]="next.config.js"
      ["angular"]="angular.json"
      ["elixir"]="mix.exs"
      ["rust"]="Cargo.toml"
    )
    PROJECT_TYPE="none"
    for project_type in "${!project_files[@]}"; do
      if [[ -f "${project_files[$project_type]}" ]]; then
        PROJECT_TYPE="$project_type"
        break
      fi
    done
    log "üîç Detected project type: $PROJECT_TYPE"
  fi

  # SETUP: ENV
  if [[ "$USE_CUSTOM_ENV" = true ]]; then
    setup_custom_env
  else
    case "$PROJECT_TYPE" in
    "none") ;; # Do nothing
    "python") setup_python_env ;;
    "django") setup_python_env ;;
    "fastapi") setup_python_env ;;
    "nodejs") setup_node_env ;;
    "nextjs") setup_node_env ;;
    "angular") setup_node_env ;;
    "elixir") setup_elixir_env ;;
    "rust") ;; # Rust sets up its own environment with cargo
    *) log "üöß Unknown technology: $PROJECT_TYPE" ;;
    esac
  fi

  # SETUP: LAYOUT
  if [[ "$USE_CUSTOM_LAYOUT" = true ]]; then
    setup_custom_layout
  else
    case "$PROJECT_TYPE" in
    "none") setup_default_layout ;;
    "python") setup_python_layout ;;
    "django") setup_django_layout ;;
    "fastapi") setup_fastapi_layout ;;
    "nodejs") setup_node_layout ;;
    "nextjs") setup_nextjs_layout ;;
    "angular") setup_angular_layout ;;
    "elixir") setup_elixir_layout ;;
    "rust") setup_rust_layout ;;
    *)
      log "üöß Unknown technology: $PROJECT_TYPE. Using default layout..."
      setup_default_layout
      ;;
    esac
  fi

  # ACTION: POST INIT HOOK
  if [[ "$USE_POST_INITIALIZATION_HOOK" = true ]]; then
    setup_post_init_hook
  fi

  tmux attach -t "$PROJECT_NAME"
}

main

log "üëã Goodbye!"
