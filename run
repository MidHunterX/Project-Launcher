#!/usr/bin/env bash

# -----------------------------[ CONFIGURATION ]----------------------------- #

# Default: project dir name
PROJECT_NAME=""
# Default: none
# [ none | python | django | fastapi | nodejs | nextjs | elixir | rust | angular ]
PROJECT_TYPE=""

# Settings: [ true | false ]
AUTOSTART_SERVER=true
AUTORUN_COMMANDS=true

# Services: uncomment to enable
# USE_POSTGRES=true
# USE_DOCKER=true
# USE_MONGODB=true
# USE_REDIS=true
# USE_NGINX=true

# ------------------------[ CUSTOM LAYOUT OVERRIDES ]------------------------ #

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$script_dir"

USE_POST_EXECUTION_HOOK=true
setup_post_execution_hook() {
  # Project specific post execution hook example
  log "🔗 Launching browser..."
  (
    new_tab_url="http://localhost:4200"
    # Wait for host url to be available to prevent race condition
    while ! curl -sf "$new_tab_url" >/dev/null; do
      sleep 0.2
    done
    attributes="-P Personal -no-remote -new-tab $new_tab_url"
    workspace='hyprctl dispatch -- exec [workspace 2]'
    $workspace firefox-developer-edition $attributes &
  ) &
}

USE_CUSTOM_ENV=false
setup_custom_env() {
  # Project specific custom init setup override example
  setup_env "node_modules/" "npm install --force --legacy-peer-deps"
}

USE_CUSTOM_LAYOUT=false
setup_custom_layout() {
  # Project specific custom layout override example

  # 1. Server (FastAPI)
  cd "../fastapi-project/"
  setup_python_env
  source "./venv/bin/activate"
  create_tmux_session "API Server" "fastapi dev main.py"
  cd "$script_dir"

  # 2. Server (NextJS)
  setup_node_env
  create_window "Web Server" "npm run dev"

  # 3. Editor (FastAPI)
  cd "../fastapi-project/"
  create_window "Editor (API)" "nvim"
  deactivate
  cd "$script_dir"

  # 4. Editor (NextJS)
  create_window "Editor (Web)" "nvim"
}

# =========================================================================== #

# █░█ ▀█▀ █ █░░ █▀
# █▄█ ░█░ █ █▄▄ ▄█

log() {
  local grn='\033[1;32m'
  local reset='\033[0;0m'
  echo -e "[${grn}$(date +'%H:%M:%S')${reset}] $1"
}

create_tmux_session() {
  local name="$1"
  local cmd="$2"
  tmux new-session -d -s "$PROJECT_NAME" -n "$name"
  if command -v "${cmd%% *}" >/dev/null; then
    tmux send-keys -t "$PROJECT_NAME" "$cmd"
    [ "$AUTOSTART_SERVER" = true ] && tmux send-keys -t "$PROJECT_NAME" Enter
  fi
}

# create_window(str:window_name str:command int:window_index)
create_window() {
  local name="$1"
  local cmd="$2"
  if command -v "${cmd%% *}" >/dev/null; then
    tmux new-window -t "$PROJECT_NAME" -n "$name"
    tmux send-keys -t "$PROJECT_NAME" "$cmd"
    [ "$AUTORUN_COMMANDS" = true ] && tmux send-keys -t "$PROJECT_NAME" Enter
  fi
}

# create_temp_window(str:window_name str:command)
create_temp_window() {
  local name="$1"
  local cmd="$2"
  if command -v "${cmd%% *}" >/dev/null; then
    tmux new-window -t "$PROJECT_NAME" -n "$1" "$2"
  fi
}

# █░░ ▄▀█ █▄█ █▀█ █░█ ▀█▀ █▀
# █▄▄ █▀█ ░█░ █▄█ █▄█ ░█░ ▄█

setup_default_layout() {
  create_tmux_session "Cmd"
  create_temp_window "Editor" "nvim"
}

setup_python_layout() {
  create_tmux_session "Cmd" "python main.py"
  create_temp_window "Editor" "nvim"
}

setup_fastapi_layout() {
  create_tmux_session "Server" "fastapi dev main.py"
  create_temp_window "Editor" "nvim"
  create_window "Test" "clear && pytest"
}

setup_nextjs_layout() {
  create_tmux_session "Server" "npm run dev"
  create_temp_window "Editor" "nvim"
}

setup_django_layout() {
  create_tmux_session "Server" "python manage.py runserver"
  create_temp_window "Editor" "nvim"
  create_window "Test" "python manage.py test"
}

setup_node_layout() {
  create_tmux_session "Server" "npm start"
  create_temp_window "Editor" "nvim"
  create_window "Test" "npm test"
}

setup_rust_layout() {
  create_tmux_session "Run" "cargo run"
  create_temp_window "Editor" "nvim"
  create_window "Test" "cargo test"
}

setup_elixir_layout() {
  create_tmux_session "Server" "iex -S mix phx.server"
  create_temp_window "Editor" "nvim"
}

setup_angular_layout() {
  create_tmux_session "Server" "ng serve"
  create_temp_window "Editor" "nvim"
}

# █▀ █▀▀ █▀█ █░█ █ █▀▀ █▀▀ █▀
# ▄█ ██▄ █▀▄ ▀▄▀ █ █▄▄ ██▄ ▄█

init_services() {
  # Syntax: [systemctl-service-name]="$USE_SERVICE"
  declare -A services=(
    [postgresql]="$USE_POSTGRES"
    [docker]="$USE_DOCKER"
    [mongod]="$USE_MONGODB"
    [redis-server]="$USE_REDIS"
    [nginx]="$USE_NGINX"
  )

  for service in "${!services[@]}"; do
    if [[ "${services[$service]}" = true ]]; then
      if ! systemctl is-active --quiet "$service"; then
        log "🚀 Starting up $service..."
        sudo systemctl start "$service"
      fi
    fi
  done
}

# █▀▀ █▄░█ █░█   █▀ █▀▀ ▀█▀ █░█ █▀█
# ██▄ █░▀█ ▀▄▀   ▄█ ██▄ ░█░ █▄█ █▀▀

setup_env() {
  local dependency_dir="$1"
  local dependency_cmd="$2"
  if [[ ! -d $dependency_dir ]]; then
    log "🚀 Setting up dependencies..."
    command -v ${dependency_cmd%% *} >/dev/null || {
      log "❌ Error: ${dependency_cmd%% *} not found"
      exit 1
    }
    $dependency_cmd
  fi
}

setup_python_env() {
  local dependency_dir="venv/"
  local dependency_cmd="python -m venv venv"
  if [[ ! -d $dependency_dir ]]; then
    setup_env "$dependency_dir" "$dependency_cmd"
    log "📦 Installing requirements..."
    source "$dependency_dir/bin/activate"
    if [[ -f "requirements.txt" ]]; then
      pip install -r requirements.txt
    else
      log "🚧 Warning: No requirements.txt found"
    fi
  fi
  source "$dependency_dir/bin/activate"
}

setup_node_env() {
  setup_env "node_modules/" "npm install"
}

setup_elixir_env() {
  setup_env "deps/" "mix setup"
}

# █▀▄▀█ ▄▀█ █ █▄░█
# █░▀░█ █▀█ █ █░▀█

main() {
  if ! command -v tmux >/dev/null; then
    log "Tmux is required for full functionality."
    log "Install with: sudo apt install tmux (or equivalent for your OS)"
    exit 0
  fi
  init_services

  # SESSION_NAME Fallback
  if [[ -z "$PROJECT_NAME" ]]; then
    PROJECT_NAME="$(basename "$PWD")"
  fi

  # Attach session if exists
  if tmux has-session -t "$PROJECT_NAME" 2>/dev/null; then
    log "Session '$PROJECT_NAME' already exists. Attaching..."
    tmux attach -t "$PROJECT_NAME"
    exit 0
  fi

  # ENV SETUP
  if [[ "$USE_CUSTOM_ENV" = true ]]; then
    setup_custom_env
  else
    case "$PROJECT_TYPE" in
    "none") ;; # Do nothing
    "python") setup_python_env ;;
    "django") setup_python_env ;;
    "fastapi") setup_python_env ;;
    "nodejs") setup_node_env ;;
    "nextjs") setup_node_env ;;
    "angular") setup_node_env ;;
    "elixir") setup_elixir_env ;;
    "rust") ;; # Rust sets up its own environment with cargo
    *) log "🚧 Unknown technology: $PROJECT_TYPE" ;;
    esac
  fi

  # LAYOUT SETUP
  if [[ "$USE_CUSTOM_LAYOUT" = true ]]; then
    setup_custom_layout
  else
    case "$PROJECT_TYPE" in
    "none") setup_default_layout ;;
    "python") setup_python_layout ;;
    "django") setup_django_layout ;;
    "fastapi") setup_fastapi_layout ;;
    "nodejs") setup_node_layout ;;
    "nextjs") setup_nextjs_layout ;;
    "angular") setup_angular_layout ;;
    "elixir") setup_elixir_layout ;;
    "rust") setup_rust_layout ;;
    *)
      log "🚧 Using default layout..."
      setup_default_layout
      ;;
    esac
  fi

  # POST EXECUTION HOOK
  if [[ "$USE_POST_EXECUTION_HOOK" = true ]]; then
    setup_post_execution_hook
  fi

  tmux attach -t "$PROJECT_NAME"
}

main
